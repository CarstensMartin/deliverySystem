package foodQuick;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Formatter;
import java.util.Scanner;

public class Invoice {

	public static void main(String[] args) {

		// File path and create an array for Customer details
		String customerTextFile = "C:/Users/MARTIN/Dropbox/Martin Carstens-115604/2. Advanced Programming Concepts/Task 7/Task/customers.txt";
		Customer[] customers = ObjectCreationCustomer(customerTextFile);

		// File path and create an array for Driver details
		String driverTextFile = "C:/Users/MARTIN/Dropbox/Martin Carstens-115604/2. Advanced Programming Concepts/Task 7/Task/drivers.txt";
		Driver[] drivers = ObjectCreationDriver(driverTextFile);

		// File path and create an array for Restaurant Order details
		String restaurantsTextFile = "C:/Users/MARTIN/Dropbox/Martin Carstens-115604/2. Advanced Programming Concepts/Task 7/Task/restaurantOrders.txt";
		Restaurant[] restaurants = ObjectCreationRestaurant(restaurantsTextFile);

		//Create a for loop to run through every order
		for (int numberOfOrder = 0; numberOfOrder < restaurants.length; numberOfOrder++) {
			//Get the order number that is applicable to this order
			int orderNumber = restaurants[numberOfOrder].orderNumber;

			// Find the customer whose order it is by order number
			int customerObjectPosition = 0;
			// If customer is found - proceed with invoice, if customer is not found, give error invoice
			int availableCustomer = 0;
			for (int i = 0; i < customers.length; i++) {
				if (customers[i].orderNumber == orderNumber) {
					customerObjectPosition = i;
					availableCustomer = 1;
				}
			}

			// Allocate a Driver for the Order
			// Start with Object position 0
			int driverObjectPosition = 0;
			//Find the driver with the least amount of deliveries in area
			//Start with a high unreachable number and work down
			int lowestDeliveries = 100000;
			// If available driver is 0 - no driver available - if 1 then Yes available
			int availableDriver = 0;

			// For loop to find out if driver is in the region and which has the lowest amount of loads
			for (int i = 0; i < drivers.length; i++) {
				if ((drivers[i].cityDriver.equals(restaurants[numberOfOrder].cityRestaurant)) && (drivers[i].deliveries < lowestDeliveries)) {
					// Update driver with least loads if another driver has less loads in the array
					// at the position
					driverObjectPosition = i;
					// Update the driver if the delivery amount is lower than previous
					lowestDeliveries = drivers[i].deliveries;
					// If a driver for the region is found,change to 1 for yes driver is available
					availableDriver = 1;
				}
			}

			// Declare all the input variables to form the output invoice message
			// Driver attributes
			String driverName = drivers[driverObjectPosition].driverName;
			// Customer attributes
			String customerName = customers[customerObjectPosition].customerName;
			String contactNumberCustomer = customers[customerObjectPosition].contactNumber;
			String streetAddressOfCustomer = customers[customerObjectPosition].streetAddressOfCustomer;
			String suburbAddressOfCustomer = customers[customerObjectPosition].suburbAddressOfCustomer;
			String cityCustomer = customers[customerObjectPosition].cityCustomer;
			String emailCustomer = customers[customerObjectPosition].emailCustomer;
			// Restaurant attributes
			String restaurantName = restaurants[numberOfOrder].restaurantName;
			String cityRestaurant = restaurants[numberOfOrder].cityRestaurant;
			String contactNumberRestaurant = restaurants[numberOfOrder].contactNumber;
			String totalPrice = restaurants[numberOfOrder].totalPrice;
			String specialInstruction = restaurants[numberOfOrder].specialInstruction;
			String item1 = restaurants[numberOfOrder].item1;
			String item2 = restaurants[numberOfOrder].item2;
			
			// Output text for successful invoice - Use method to compile message
			String outputMessage = InvoiceDetail(orderNumber, driverName, customerName,
					contactNumberCustomer, streetAddressOfCustomer, suburbAddressOfCustomer, cityCustomer,
					emailCustomer, restaurantName, cityRestaurant, contactNumberRestaurant, totalPrice,
					specialInstruction, item1, item2);

			// Output text for invoice if there is no driver available
			String driverErrorOutputMessage = "Sorry! \r\nOur drivers are too far away from you to be able to deliver to your location.";

			
			//Give Message result:
			// If there is an error finding the order number in the client array - give error message in console and invoice text
			if (availableCustomer == 0) {
				String customerNotFoundMessage = "Error file created - Customer matching the order number " + orderNumber + " could not be found";
				// Add to the file name that there was a driver error to improve visibility
				String error = "-customer-loading-error";
				// Use method to write the output text file
				InvoiceFileCreator(orderNumber, customerNotFoundMessage, error);
				// Display error message on console
				System.out.println("\n" + customerNotFoundMessage);
			}
			
			// If there is no drivers available to complete the load - Display on console and invoice an error message
			else if (availableDriver == 0) {
				// Add to the file name that there was a driver error to improve visibility
				String error = "-driver-error";
				// Use method to write the output text file
				InvoiceFileCreator(orderNumber, driverErrorOutputMessage, error);
				// Display error message on console
				String fileCreatedMessage = ("Error file created - No driver available for order" + orderNumber);
				System.out.println("\n" + fileCreatedMessage);
			}
			
			// If all the loading is successful - create a correct invoice
			else {
				// Declare no error (blank) for file name modifying
				String noError = "";
				// Use method to write the output text file
				String fileCreatedMessage = InvoiceFileCreator(orderNumber, outputMessage, noError);
				// Display success/ unsuccessful message on console
				System.out.println("\n" + fileCreatedMessage);
				System.out.println("Driver " + driverName +" is allocated for this load.");
			}

			
			//If a driver is allocated to a load (1 = Yes)
			if(availableDriver == 1) {
				// Update the drivers array after a load is allocated to be able to allocate the next load accurately.
				drivers[driverObjectPosition].deliveries = (drivers[driverObjectPosition].deliveries + 1);
			}
			

		}
	}

	// Method to create files
	public static String InvoiceFileCreator(int orderNumber, String outputMessage, String error) {
		String fileCreatedMessage = "New invoice file " + orderNumber + " have been created.";
		try {
			// Create a new Text file
			Formatter newFileWrite = new Formatter(
					"C:/Users/MARTIN/Dropbox/Martin Carstens-115604/2. Advanced Programming Concepts/Task 7/Task/invoice" + orderNumber + error + ".txt");
			// Write the new String text inside
			newFileWrite.format("%s", outputMessage);
			// Close the file writer
			newFileWrite.close();
		}
		// If there was a problem creating the file - display the below error message
		catch (FileNotFoundException e) {
			fileCreatedMessage = "Error - Invoice File NOT created for " + orderNumber;
		}
		// Return message if the file was successfully created
		return fileCreatedMessage;

	}

	// Invoice compilation Method for the text inside invoice
	public static String InvoiceDetail(int orderNumber, String driverName,
			String customerName, String contactNumberCustomer, String streetAddressOfCustomer,
			String suburbAddressOfCustomer, String cityCustomer, String emailCustomer, String restaurantName,
			String cityRestaurant, String contactNumberRestaurant, String totalPrice, String specialInstruction,
			String item1, String item2) {

		// Compiling the output message with the invoice detail
		String outputMessage = ("Order number " + orderNumber 
				+ "\r\nCustomer: " + customerName 
				+ "\r\nEmail: " + emailCustomer 
				+ "\r\nPhone number: " + contactNumberCustomer 
				+ "\r\nLocation: " + cityCustomer
				+ "\r\n" 
				+ "\r\nYou have ordered the following from  " + restaurantName + " in " + cityRestaurant
				+ "\r\n" 
				+ "\r\n" + item1 
				+ "\r\n" + item2 
				+ "\r\n" 
				+ "\r\nSpecial instructions: " + specialInstruction
				+ "\r\n" 
				+ "\r\nTotal: R" + totalPrice 
				+ "\r\n" 
				+ "\r\n" + driverName + " is nearest to the restaurant and so he will be delivering your" 
				+ "\r\norder to you at:" 
				+ "\r\n "
				+ "\r\n" + streetAddressOfCustomer 
				+ "\r\n" + suburbAddressOfCustomer 
				+ "\r\n "
				+ "\r\nIf you need to contact the restaurant, their number is " + contactNumberRestaurant);
		// Return the invoice text
		return outputMessage;
	}

	// Method to determine the number of lines - to know how many object to create in the array
	public static int NumberOfLines(String fileLocation) {
		// Declare countLines to count the number of lines
		int countLines = 0;
		//Use the scanner function and read the number of lines
		try {
			File file = new File(fileLocation);
			Scanner lineNumberReader = new Scanner(file);
			while (lineNumberReader.hasNextLine()) {
				countLines++;
				lineNumberReader.nextLine();
			}
			lineNumberReader.close();
		} 
		//Error message if there is a problem loading the file
		catch (FileNotFoundException e) {
			System.out.println("Error reading number of lines at location: " + fileLocation);
		}
		//Return the amount of lines counted
		return countLines;
	}

	// CUSTOMERS:
	// Method to read data from text file and create array of customers
	public static Customer[] ObjectCreationCustomer(String fileLocation) {
		// Declare countLines - each line is an object in the array
		int countLines = 0;
		// Declare the array - call method NumberOfLines() to know the array size
		Customer[] customersArray = new Customer[NumberOfLines(fileLocation)];

		// Use the scanner method to scan the customer text file line my line
		try {
			File file = new File(fileLocation);
			Scanner lineScan = new Scanner(file);
			while (lineScan.hasNextLine()) {
				// Get the string value of the line
				String textLine = lineScan.nextLine();

				// Use the scanner function to scan the items inside the line
				try (Scanner itemScanner = new Scanner(textLine)) {
					// Use the delimiter to know until where the scanner must scan
					itemScanner.useDelimiter(", ");
					while (itemScanner.hasNext()) {
						// Declare the String variables to store the attributes
						String orderNumberString = itemScanner.next();
						String customerName = itemScanner.next();
						String contactNumber = itemScanner.next();
						String streetAddressOfCustomer = itemScanner.next();
						String suburbAddressOfCustomer = itemScanner.next();
						String cityCustomer = itemScanner.next();
						String emailCustomer = itemScanner.next();
						// Parse the string to an integer
						int orderNumber = Integer.parseInt(orderNumberString);

						// Declare a new object
						Customer customer1 = new Customer(orderNumber, customerName, contactNumber,
								streetAddressOfCustomer, suburbAddressOfCustomer, cityCustomer, emailCustomer);
						// Add the object to the array
						customersArray[countLines] = customer1;
					}
				}
				// Add 1 for the new array object
				countLines++;
			}
			// Close the scanner
			lineScan.close();
		}
		// If problem with executing scanner, give error message
		catch (FileNotFoundException e) {
			System.out.println("Error reading Customer Objects at location: " + fileLocation);
		}
		// Return the array of objects
		return customersArray;
	}

	// DRIVERS:
	// Method to read data from text file and create array of drivers
	public static Driver[] ObjectCreationDriver(String fileLocation) {
		// Declare countLines - each line is an object in the array
		int countLines = 0;
		// Declare the array - call method NumberOfLines() to know the array size
		Driver[] driverArray = new Driver[NumberOfLines(fileLocation)];

		// Use the scanner method to scan the customer text file line my line
		try {
			File file = new File(fileLocation);
			Scanner lineScan = new Scanner(file);
			while (lineScan.hasNextLine()) {
				// Get the string value of the line
				String textLine = lineScan.nextLine();

				// Use the scanner function to scan the items in the line
				try (Scanner itemScanner = new Scanner(textLine)) {
					// Use the delimiter to know until where the scanner must scan
					itemScanner.useDelimiter(", ");
					while (itemScanner.hasNext()) {
						// Declare the String variables to store the attributes
						String driverName = itemScanner.next();
						String cityDriver = itemScanner.next();
						String deliveriesString = itemScanner.next();
						
						// Parse the string to an integer
						int deliveries = Integer.parseInt(deliveriesString);

						// Declare a new object
						Driver driver1 = new Driver(driverName, cityDriver, deliveries);
						// Add the object to the array
						driverArray[countLines] = driver1;
					}
				}
				// Add 1 for the new array object position
				countLines++;
			}
			// Close the scanner
			lineScan.close();
		} 
		// If problem with executing scanner, give error message
		catch (FileNotFoundException e) {
			System.out.println("Error reading Driver Objects at location: " + fileLocation);
		}
		// Return the array of objects
		return driverArray;
	}

	// RESTAURANT ORDERS:
	// Method to read data from text file and create array of Restaurants
	public static Restaurant[] ObjectCreationRestaurant(String fileLocation) {
		// Declare countLines - each line is an object in the array
		int countLines = 0;
		// Declare the array - call method NumberOfLines() to know the array size
		Restaurant[] restaurantsArray = new Restaurant[NumberOfLines(fileLocation)];

		// Use the scanner method to scan the customer text file line my line
		try {
			File file = new File(fileLocation);
			Scanner lineScan = new Scanner(file);
			while (lineScan.hasNextLine()) {
				// Get the string value of the line
				String textLine = lineScan.nextLine();

				// Use the scanner function to scan the items in the line
				try (Scanner itemScanner = new Scanner(textLine)) {
					// Use the delimiter to know until where the scanner must scan
					itemScanner.useDelimiter(", ");
					while (itemScanner.hasNext()) {
						// Declare the String variables to store the attributes
						String orderNumberString = itemScanner.next();
						String restaurantName = itemScanner.next();
						String cityRestaurant = itemScanner.next();
						String contactNumber = itemScanner.next();
						String totalPrice = itemScanner.next();
						String specialInstruction = itemScanner.next();
						String item1 = itemScanner.next();
						String item2 = itemScanner.next();

						// Parse the string to an integer
						int orderNumber = Integer.parseInt(orderNumberString);

						// Declare a new object
						Restaurant restaurant1 = new Restaurant(orderNumber, restaurantName, cityRestaurant,
								contactNumber, totalPrice, specialInstruction, item1, item2);
						// Add the object to the array
						restaurantsArray[countLines] = restaurant1;
					}
				}
				// Add 1 for the new array object
				countLines++;
			}
			// Close the scanner
			lineScan.close();
		} 
		// If problem with executing scanner, give error message
		catch (FileNotFoundException e) {
			System.out.println("Error reading Restaurant Objects at location: " + fileLocation);
		}
		// Return the array of objects
		return restaurantsArray;
	}
}
